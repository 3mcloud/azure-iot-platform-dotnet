parameters:
  subscriptionName:
  locationName:
  environmentName:
  subscriptionId:
  applicationCode:
  applicationShortCode: 
  environmentCategory:


jobs:
  - template: get-approval.yaml
    parameters:
      environmentName: ${{parameters.environmentName}}

  - job: printVariables
    displayName: Print variables
    dependsOn:
      - getApproval
    variables:
      - template: variables-deploy-infra.yaml
        parameters:
          subscriptionName: ${{parameters.subscriptionName}}
          locationName: ${{parameters.locationName}}
          environmentName: ${{parameters.environmentName}}
          subscriptionId: ${{parameters.subscriptionId}}
          applicationCode: ${{parameters.applicationCode}}
          applicationShortCode: ${{parameters.applicationShortCode}}
          environmentCategory: ${{parameters.environmentCategory}}
    steps:
      - checkout: none

      - template: print-pipeline-resource-variables.yaml
        parameters:
          pipelineResourceName: test

      - script: |-
          echo "parameter: subscriptionName: ${{parameters.subscriptionName}}"
          echo "parameter: locationName: ${{parameters.locationName}}"
          echo "parameter: appInsightsLocation: ${{parameters.appInsightsLocation}}"
          echo "parameter: environmentName: ${{parameters.environmentName}}"
          echo "parameter: subscriptionId: ${{parameters.subscriptionId}}"
          echo "parameter: applicationCode: ${{parameters.applicationCode}}"
          echo "parameter: applicationShortCode: ${{parameters.applicationShortCode}}"
          echo "parameter: environmentCategory: ${{parameters.environmentCategory}}"
          echo "parameter: kubernetesVersion: ${{parameters.kubernetesVersion}}"
          echo "parameter: sendgridEmail: ${{parameters.sendgridEmail}}"
          echo "variable: aksPartialName: $(aksPartialName)"
          echo "variable: appConfigurationPartialName: $(appConfigurationPartialName)"
          echo "variable: appInsightsPartialName: $(appInsightsPartialName)"
          echo "variable: armDirectory: $(armDirectory)"
          echo "variable: automationPartialName: $(automationPartialName)"
          echo "variable: blobContainerPartialName: $(blobContainerPartialName)"
          echo "variable: cosmosDbName: $(cosmosDbName)"
          echo "variable: cosmosDbAccountPartialName: $(cosmosDbAccountPartialName)"
          echo "variable: crslPlatformKeyVault: $(crslPlatformKeyVault)"
          echo "variable: defaultSasKeyName: $(defaultSasKeyName)"
          echo "variable: eventHubPartialName: $(eventHubPartialName)"
          echo "variable: functionApp1PartialName: $(functionApp1PartialName)"
          echo "variable: functionApp2PartialName: $(functionApp2PartialName)"
          echo "variable: keyVaultPartialName: $(keyVaultPartialName)"
          echo "variable: mapsPartialName: $(mapsPartialName)"
          echo "variable: omsWorkspacePartialName: $(omsWorkspacePartialName)"
          echo "variable: storageAccountPartialName: $(storageAccountPartialName)"
          echo "variable: tenantId: $(tenantId)"
          echo "variable: userObjId: $(userObjId)"
          echo "variable: aksName: $(aksName)"
          echo "variable: appConfigurationName: $(appConfigurationName)"
          echo "variable: appInsightsName: $(appInsightsName)"
          echo "variable: armParametersDirectory: $(armParametersDirectory)"
          echo "variable: armTemplatesDirectory: $(armTemplatesDirectory)"
          echo "variable: automationName: $(automationName)"
          echo "variable: blobContainerName: $(blobContainerName)"
          echo "variable: cosmosDbAccountName: $(cosmosDbAccountName)"
          echo "variable: eventHubName: $(eventHubName)"
          echo "variable: functionApp1Name: $(functionApp1Name)"
          echo "variable: functionApp2Name: $(functionApp2Name)"
          echo "variable: keyVaultName: $(keyVaultName)"
          echo "variable: mapsName: $(mapsName)"
          echo "variable: omsWorkspaceName: $(omsWorkspaceName)"
          echo "variable: resourceGroupName: $(resourceGroupName)"
          echo "variable: storageAccountName: $(storageAccountName)"
        displayName: Print variables


  - job: testCLIPowershell
    displayName: testing CLI and Powershell
    pool:
      vmImage: windows-latest
    dependsOn:
      - printVariables
    variables:
      - template: variables-deploy-infra.yaml
        parameters:
          subscriptionName: ${{parameters.subscriptionName}}
          locationName: ${{parameters.locationName}}
          environmentName: ${{parameters.environmentName}}
          subscriptionId: ${{parameters.subscriptionId}}
          applicationCode: ${{parameters.applicationCode}}
          applicationShortCode: ${{parameters.applicationShortCode}}
          environmentCategory: ${{parameters.environmentCategory}}
    steps:
      - checkout: none

      - task: AzureCLI@2
        displayName: Get and set the ServicePrincipalId, Keys and TenantId
        inputs:
          azureSubscription: ${{parameters.subscriptionName}}
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |-
            echo "##vso[task.setvariable variable=servicePrincipalId]$servicePrincipalId"
            echo "##vso[task.setvariable variable=servicePrincipalKey]$servicePrincipalKey"
            echo "##vso[task.setvariable variable=TestVar]JustForTest"
          addSpnToEnvironment: true

      - task: AzurePowerShell@3
        displayName: Verify the ServicePrincipalId, Keys and TenantId
        inputs:
          azureSubscription: ${{parameters.subscriptionName}}
          azurePowerShellVersion: latestVersion
          scriptType: inlineScript
          inline: |-
            Write-Host $(servicePrincipalId)
            Write-Host $(servicePrincipalKey)
            Write-Host $(tenantId)
        

      - task: AzurePowerShell@3
        displayName: Create database, tables, mapping, queries and data connection.
        inputs:
          azureSubscription: ${{parameters.subscriptionName}}
          ScriptType: FilePath
          ScriptPath: pipelines/cd/ExistingTenantsADE/ExistingTenantsADE.ps1
          ScriptArguments: -applicationCode ${{parameters.applicationCode}} -environmentCategory ${{parameters.environmentCategory}} -resourceGroup $(resourceGroupName) -servicePrincipalId $(servicePrincipalId) -servicePrincipalKey $(servicePrincipalKey) -tenantId $(tenantId)
          azurePowerShellVersion: LatestVersion
          workingDirectory: $(System.DefualtWorkingDirectory)