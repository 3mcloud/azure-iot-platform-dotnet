parameters:
  subscriptionName:
  locationName:
  environmentName:
  subscriptionId:
  applicationCode:
  applicationShortCode: 
  environmentCategory:
  telemetryStorageType:

jobs:
  - template: get-approval.yaml
    parameters:
      environmentName: ${{parameters.environmentName}}

  - job: printVariables
    displayName: Print variables
    dependsOn:
      - getApproval
    variables:
      - template: variables-deploy-infra.yaml
        parameters:
          subscriptionName: ${{parameters.subscriptionName}}
          locationName: ${{parameters.locationName}}
          environmentName: ${{parameters.environmentName}}
          subscriptionId: ${{parameters.subscriptionId}}
          applicationCode: ${{parameters.applicationCode}}
          applicationShortCode: ${{parameters.applicationShortCode}}
          environmentCategory: ${{parameters.environmentCategory}}
    steps:
      - checkout: none

      - template: print-pipeline-resource-variables.yaml
        parameters:
          pipelineResourceName: test

      - script: |-
          echo "parameter: subscriptionName: ${{parameters.subscriptionName}}"
          echo "parameter: locationName: ${{parameters.locationName}}"
          echo "parameter: environmentName: ${{parameters.environmentName}}"
          echo "parameter: subscriptionId: ${{parameters.subscriptionId}}"
          echo "parameter: applicationCode: ${{parameters.applicationCode}}"
          echo "parameter: applicationShortCode: ${{parameters.applicationShortCode}}"
          echo "parameter: environmentCategory: ${{parameters.environmentCategory}}"
          echo "variable: aksName: $(aksName)"
          echo "variable: resourceGroupName: $(resourceGroupName)"
          echo "##vso[task.setvariable variable=storageType;isOutput=true]${{parameters.telemetryStorageType}}"
        displayName: Print variables


  - job: migratehelmversion
    displayName: Migrate Helm v2 to v3
    condition: and(succeeded(),eq(dependencies.printVariables.outputs['printVariables.storageType'],'ade'))
    dependsOn:
       - printVariables

    variables:
      - template: variables-deploy-infra.yaml
        parameters:
          subscriptionName: ${{parameters.subscriptionName}}
          locationName: ${{parameters.locationName}}
          environmentName: ${{parameters.environmentName}}
          subscriptionId: ${{parameters.subscriptionId}}
          applicationCode: ${{parameters.applicationCode}}
          applicationShortCode: ${{parameters.applicationShortCode}}
          environmentCategory: ${{parameters.environmentCategory}}
    steps:
      - checkout: self
        displayName: Checkout repository

      - task: HelmInstaller@1
        displayName: Install Helm
        inputs:
          helmVersionToInstall: $(helmVersion2)

      - task: HelmDeploy@0
        displayName: Initialize Helm
        inputs:
          connectionType: Azure Resource Manager
          azureSubscription: ${{parameters.subscriptionName}}
          azureResourceGroup: $(resourceGroupName)
          kubernetesCluster: $(aksName)
          namespace: default
          command: init
          arguments: --force-upgrade

  - job: clusterissuer
    displayName: Create a Cluster Issuer
    dependsOn: 
      - migratehelmversion
    variables:
      - template: variables-deploy-infra.yaml
        parameters:
          subscriptionName: ${{parameters.subscriptionName}}
          locationName: ${{parameters.locationName}}
          environmentName: ${{parameters.environmentName}}
          subscriptionId: ${{parameters.subscriptionId}}
          applicationCode: ${{parameters.applicationCode}}
          applicationShortCode: ${{parameters.applicationShortCode}}
          environmentCategory: ${{parameters.environmentCategory}}    
    steps:
      - task: HelmInstaller@1
        displayName: Install Helm in another job
        inputs:
          helmVersionToInstall: $(helmVersion2)

  - job: A
    steps:
    - bash: echo "##vso[task.setvariable variable=shouldrun;isOutput=true]${{parameters.locationName}}"
    # or on Windows:
    # - script: echo ##vso[task.setvariable variable=shouldrun;isOutput=true]true
      name: printvar

  - job: B
    condition: and(succeeded(), eq(dependencies.A.outputs['printvar.shouldrun'], 'central'))
    dependsOn: A
    steps:
    - script: echo hello from B